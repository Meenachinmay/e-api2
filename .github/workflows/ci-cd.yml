name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env: # Adding environment variables
      NESTJS_PORT: ${{ secrets.NESTJS_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # ...add more here

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    # Creating env file 
    - name: "Create env file"
      run: |
        echo "${{secrets.ENV_FILE }}" >> .env

    # Cache Node.js modules
    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          
    # Cache Docker layers
    - name: Cache Docker layers
      uses: satackey/action-docker-layer-caching@v0.0.11
      continue-on-error: true
      with:
        key: your-docker-image-name-${{ github.sha }}
        restore-keys: |
          your-docker-image-name-

    # Login to Docker Hub
    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Build Docker Image
    - name: Build Docker Image
      run: docker build -t your-docker-image-name .

    # Push Docker Image
    - name: Push Docker Image
      run: docker push your-docker-image-name

    # Deploy to DigitalOcean
    # - name: Deploy to DigitalOcean
    #   run: |
    #     # Use SSH or DigitalOcean API to deploy the image to your droplet
