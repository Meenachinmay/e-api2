name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build_and_test:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    env: # Adding environment variables
      NESTJS_PORT: ${{ secrets.NESTJS_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # ...add more here
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
      
    # Creating env file 
    - name: "Create env file"
      run: |
        echo "${{secrets.ENV_FILE }}" >> .env

    # Login to Docker Hub
    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker Image
      run: docker build -t startup2023/oeapi:dev-latest .
    
    # - name: Push Docker Image
    #   run: docker push startup2023/oeapi:dev-latest

    # - name: Pull Docker Image
    #   run: docker pull startup2023/oeapi:dev-latest
    
    - name: Run Docker Image
      run: docker run --name test_container -d startup2023/oeapi:dev-latest

    - name: Health Check
      run: |
        sleep 30  # Wait for 30 seconds to allow the container to start
        response=$(docker exec test_container curl -s -o /dev/null -w "%{http_code}" http://localhost:$NESTJS_PORT/auth/health-check)
        if [ "$response" -eq 200 ]; then
          echo "Health check passed"
        else
          echo "Health check failed with status code $response"
          exit 1
        fi 

  deploy:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    env: # Adding environment variables
      NESTJS_PORT: ${{ secrets.NESTJS_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      # ...add more here

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    # Creating env file 
    - name: "Create env file"
      run: |
        echo "${{secrets.ENV_FILE }}" >> .env

    # Login to Docker Hub
    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # Build Docker Image
    - name: Build Docker Image
      run: docker build -t startup2023/oeapi:latest .

    # Push Docker Image
    - name: Push Docker Image
      run: docker push startup2023/oeapi:latest

    # Deploy to DigitalOcean 
    - name: Deploy to DigitalOcean
      run: |
        # Generate an SSH key file from GitHub secrets
        echo "${{ secrets.DROPLET_SSH_KEY }}" > droplet_ssh_key
        chmod 600 droplet_ssh_key

        # SSH into the droplet and pull the latest Docker image, then restart the container
        ssh -o StrictHostKeyChecking=no -i droplet_ssh_key ${{ secrets.DROPLET_SSH_USERNAME }}@165.22.87.111 << 'ENDSSH'
          docker pull startup2023/oeapi:latest
          docker stop oeapi_container || true
          docker rm oeapi_container || true
          docker run --name oeapi_container -d -p 80:3000 startup2023/oeapi:latest
        ENDSSH